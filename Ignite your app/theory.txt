1- What is `NPM`? => is a package manager which installs the necessary packeges to be used in creating the app.
NPM is a node package manager. Which helps to manage the node packages for you application. All the packages/modules of the React are node packages, So you will be adding/installing packages or modules using NPM for Rect application.

2- What is `Parcel/Webpack`? Why do we need it? => Parcel automatically tracks all of the files, configuration, plugins, and dev dependencies that are involved in your build, and granularly invalidates the cache when something changes. It integrates with low-level operating system APIs to determine what files have changed in milliseconds, no matter the project size.

3- What is `.parcel-cache`? => is the directory which is created when we build our application using npx parcel <file> command.
`.parcel-cache` is a directory generated by the Parcel bundler, serving as a cache for storing intermediate build results. It enhances the development workflow by speeding up subsequent builds and optimizing resource usage.

4- What is `npx` ? => is a command for executing the packages.
NPX stands for Node Package eXecute. It is simply an NPM package runner. It allows developers to execute any Javascript Package available on the NPM registry without even installing it. NPX is installed automatically with NPM version 5.2.

5- What is difference between `dependencies` vs `devDependencies`? =>
Dependencies are the packages that are required for your application to run properly, devDependencies are the packages that are required for development and testing purposes only, and peerDependencies are the packages that your package expects to be installed in the user's environment.

6- What is Tree Shaking? => is a useful attribute of parcel to removed unwanted code from the project when it is build
Tree shaking is a technique that removes unused code from your JavaScript bundles, making them smaller and faster to load. It can help you optimize your web performance and reduce your carbon footprint

7- What is Hot Module Replacement? => it is the process where the code automatically get hot loaded and reflected in the server.
Hot Module Replacement (HMR) exchanges, adds, or removes modules while an application is running, without a full reload. This can significantly speed up development in a few ways: Retain application state which is lost during a full reload. Save valuable development time by only updating what's changed.

8- List down your favourite 5 superpowers of Parcel and describe any 3 of them in your
own words?=> 
* dev build : creates the dev build for the developer.
* local server: hosts the build on a port for the app.
* Hot Module Replacement (HMR): Automatically refreshes the code into ther server whenever a change is made.
* Caching: caches the build for further use, to minimise time in concurrent builds.
* Minification: removes white spaces in the code for production build.
* File Watching Algorithm: keeps a look on file which is build through parcel.

9- What is `.gitignore`? What should we add and not add into it? => is a directory where we can mention the file which is to be ignored and not committed to git repository.
The files which are regenerative should be added in .gitignore. Files like node modules, parcel cache and dist should be added in gitignore. Files like package.json, packag-lock.json should not be there as they contain important configuration related to the project.

10- What is the difference between `package.json` and `package-lock.json`?=>
In summary, the package. json file focuses on project metadata and specifying the desired versions of dependencies, while the package-lock. json file ensures deterministic installations by locking the exact versions of dependencies and their dependencies.

11- Why should I not modify `package-lock.json`?=> 
This file ensures that every developer working on the project, as well as the CI/CD system, uses the exact same versions of dependencies.

12- What is `node_modules` ? Is it a good idea to push that on git?=>
The node_modules folder is a folder that is created when you install packages using the Node Package Manager (npm). It stores the packages and their dependencies that your project requires.
No it is not a good idea to commit node modules in your git repository as it a very heavy folder and also it can be regenerated using npm install again with the same package.json.

13- What is the `dist` folder?=> The /dist folder contains the minimized version of the source code. The code present in the /dist folder is actually the code which is used on production web applications. Along with the minified code, the /dist folder also comprises of all the compiled modules that may or may not be used with other systems.

14- What is `browserlists? => browserslist is a configuration file that determines which browsers your project should support. It is used by many tools, including Autoprefixer, Babel, and Stylelint, to automatically add vendor prefixes and polyfills to your CSS and JavaScript code.
 